#include <stdio.h>

#include <time.h>


/*뺄셈 이용방식*/

int gcd_minus(int u, int v)
{
    int t;
    while (u)
    {
        if (u < v) /* u는 v보다 커야하고, 아닐 경우 상호 교환*/
        {
            t = u;
            u = v;
            v = t;
        }
        u = u - v;

    }
    return v;
}


/*나머지 연산 방법*/

int get_modulus(int u, int v)
{
    int t; /*temp 변수, 위치 교환*/
    while (v) /*v가0이면 루프를 끝내고, 아니면 루프를 지속한다*/
    {
        t = u % v;
        u = v;
        v = t;
    }
    return u;
}

/*재귀 함수 이용*/

int gcd_recursion(int u, int v)
{
    if (v == 0)
        return u;
    else
        return gcd_recursion(v, u % v);
}

#define LOOP 100000




void main()
{
    double u, v, gcd;
    clock_t start, end;
    int i;


    puts("\nEUCLID2: GET GCD with time checking"
        "\n             input 0 to end program");

    while (1)
    {
        
        puts("\n\n INPUT two positive integer-> ");
        scanf("%lf %lf", &u, &v);
        if (u < 0 || v < 0) /*음수의 입력은 무효*/
            continue;
        if (u == 0 || v == 0) /*0입력시 종료*/
            break;

        start = clock();
        for (i = 0; i < LOOP; i++)
            gcd = gcd_minus(u, v);
        end = clock();


        printf("\n Minus methods: GCD of %lf and %lf is %lf. in %lf ticks", u, v, gcd, (double)(end - start) / CLOCKS_PER_SEC);

        start = clock(); /* gcd_modulus()의 시간 측정*/
        for (i = 0; i < LOOP; i++)
            gcd = get_modulus(u, v);
        end = clock();

        printf("\n MODULUS methods : GCD of %lf and %lf is %lf. in %lf ticks", u, v, gcd, (double)(end - start) / CLOCKS_PER_SEC);

        start = clock(); /* gcd_recursion의 시간 측정*/
        for (i = 0; i < LOOP; i++)
            gcd = gcd_recursion(u, v);
        end = clock();

        printf("\n Recursion methods : GCD of%lf and %lf is %lf. in %lf ticks", u, v, gcd, (double)(end - start) / CLOCKS_PER_SEC);
    }
}
